function dataout = onscale_point_source_curved_integral(data, xsrc, ysrc, zsrc, smesh, sph_radius)
% ONSCALE_POINT_SOURCE_CURVED_INTEGRAL
%
% dataout = onscale_point_source_curved_integral(data, xsrc, ysrc, zsrc, smesh, sph_radius)
%
% The goal of this function is to compute the guided wave field in a spherical
% isotropic layer bounded above by air and below by water. To do this, we use 
% OnScale to simulate axisymmetric propagation on a curved spherical layer.
% Because this problem is 2D, it is computationally much easier than directly
% simulated a line source in 3D. The solution to the 2D axisymmetric problem
% approximates a point source excitation, and so it is an approximation of the 
% Green's function. By convolving the Green's function along a line, we can 
% approximate numerically the solution for a line-source applied to a spherical
% layer in 3D. 
%
% See point_source_curved.flxinp for the OnScale input file for the point-source
% on a spherical layer solution.
% 
% Convolve the point-source OnScale solution data along a line with
% coordinates (xsrc, ysrc, zsrc). This approximates the solution for
% for a line source. The domain defined by smesh is assumed to be
% spherical with radius sph_radius.
%
% Parameters
% ----------
% data : struct with OnScale solution arrays with fields:
%        x  : x (circumferential) position in the flat OnScale reference geometry
%        xs : x in the skewed OnScale geometry
%        ys : y in the skewed OnScale geometry
%        t  : time points
%        yvel : surface vertical velocity
%        This struct is generated by load_onscale_matdata.m
% xsrc  : [vector] x coordinates of the line source
% ysrc  : [vector] y coordinates of the line source
% zsrc  : [vector] z coordinates of the line source
% smesh : struct defining spherical mesh with fields:
%         x : x-coordinate of mesh nodes
%         y : y-coordinate of mesh nodes
%         z : z-coordinate of mesh nodes
% sph_radius : [scalar] radius of the spherical surface in smesh
%
% Returns
% -------
% dataout : struct with fields:
%           smesh : copy of smesh
%           t : time points
%           v : surface vertical velocity at smesh points
%
% Author: John J. Pitre, Jr.
%
% Pitre, JJ, MA Kirby, DS Li, TT Shen, RK Wang, M O'Donnell, and I Pelivanov.
%    Nearly-incompressible transverse isotropy (NITI) of cornea elasticity: 
%    model and experiments with acoustic micro-tapping OCE. Scientific Reports 
%    (2020).
%
% ---


% Extract values from data struct
x = data.x;
xs = data.xs';
ys = data.ys';
t = data.t;
v = squeeze(data.yvel);
dx = x(2) - x(1);
dt = t(2) - t(1);

% Find great-circle distance from the actual source point at (0, R, 0)
% to the domain points defined by smesh - call this d0.
P = [xsrc, ysrc + sph_radius, zsrc];
P0 = [0, sph_radius, 0];
Q0 = [xs, ys + sph_radius, zeros(size(xs))];
Q = [smesh.x, smesh.y + sph_radius, smesh.z];
d0 = sph_radius*acos(Q0*P0');

% Divide the line source path into curved segments of length ds
% Set weights to use trapezoid-rule integration
ds = sph_radius*acos(P(1,:)*P(2,:)');
wgt = 0.5*ds*[1; 2*ones(length(xsrc)-2, 1); 1];

% Compute integral at each time point separately
nt = size(v,2);
vt = zeros(length(smesh.x), nt);
for j = 1:nt

    % Main integration loop - do for each time point
    % d is the distance from the line source points to the domain points
    % defined by smesh. We interpolate the value of the wavefield from the
    % true source (located at distance d0) to the value needed for the 
    % integral (located at distance d). The integration here is trapezoid
    % rule, as set by the weights wgt.
    for i = 1:length(xsrc)
        d = sph_radius*acos(Q*P(i,:)');
        vt(:,j) = vt(:,j) + wgt(i)*interp1(d0, v(:,j), d);
    end

end

% Output struct
dataout.smesh = smesh;
dataout.t = t;
dataout.v = vt;