%
%
% This script loads the *.mat results generated by running the OnScale
% model point_source_curved.flxinp. It then outputs an XT plot and 2D Fourier power
% spectrum, similar to Supplementary Figure S6.2. 
%
% Author: John J. Pitre, Jr.
%
% Pitre, JJ, MA Kirby, DS Li, TT Shen, RK Wang, M O'Donnell, and I Pelivanov.
%    Nearly-incompressible transverse isotropy (NITI) of cornea elasticity: 
%    model and experiments with acoustic micro-tapping OCE. Scientific Reports 
%    (2020).
%

%
% We have also included a *.mat file containing pre-computed results for this
% model. If you want to load the pre-computed *.mat results rather than those
% generated by OnScale, set "load_precomputed_results" to true. 
%
load_precomputed_results = false;
if load_precomputed_results
    load('example_onscale_results_point_source_curved.mat');
else
    %
    % Here is the path to the directory containing the OnScale *.flxdato results.
    %
    % *** Change this value to reflect the location of the your results ***
    %
    results_path = uigetdir(pwd, 'Select directory containing OnScale results');
    flxdato_prefix = 'psc_results';
    data = load_onscale_flexdata(results_path, flxdato_prefix, 1);
end


%
% Extract arrays from the data structure.
% Crop the results to a smaller range for display.
% Normalize the velocity field to arbitrary units.
%
x = data.x;
t = data.t;
v = squeeze(data.yvel);
xmask = (x <= 0.01);
tmask = (t <= 0.005);
dx = x(2) - x(1);
dt = t(2) - t(1);
x = x(xmask);
t = t(tmask);
v = v(xmask, tmask);
v = v/max(v(:));

% Compute power spectrum and crop results for display.
nfft = 4096;
[VdB, f, k] = xttools_power_spectrum(v, dt, dx, nfft);
fmax = 5000;
kmax = 1500;
fmask = (f <= fmax);
kmask = (k <= kmax);
f = f(fmask);
k = k(kmask);
VdB = VdB(kmask, fmask);

% XT plot and FK plot
figure
pcolor(t*1000, x*1000, v);
shading flat
xlabel('Time (ms)')
ylabel('Lateral Position (mm)')
caxis([-0.3, 0.3])
cb = colorbar;
ylabel(cb, 'Surface Vertical Velocity (a.u.)')

figure
pcolor(f/1000, k/1000, VdB);
shading flat
xlabel('Frequency (kHz)')
ylabel('Wavenumber (1/mm)')
caxis([-20, 0])
cb = colorbar;
ylabel(cb, 'Power Spectrum (dB)')